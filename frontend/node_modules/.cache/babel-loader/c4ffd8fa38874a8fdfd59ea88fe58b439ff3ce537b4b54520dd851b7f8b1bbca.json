{"ast":null,"code":"var _jsxFileName = \"/Users/diegosanmartin/Desktop/IE University/IE 2022/Everywhere/profiles/frontend/src/components/AccountContext.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { createContext } from \"react\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AccountContext = /*#__PURE__*/createContext(); //\n\n// Function to keep track of whether logged in or not\nconst UserContext = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState({\n    loggedIn: null\n  }); // loggedIn is null by default\n  const navigate = useNavigate();\n\n  // Function below runs when component mounts which will be when the page is refreshed\n  useEffect(() => {\n    fetch(\"http://localhost:4000/auth/login\", {\n      // fetch the login route\n      credentials: \"include\" // include cookies\n    }).catch(err => {\n      setUser({\n        loggedIn: false\n      }); // if error, set loggedIn to false\n      return;\n    }).then(res => {\n      if (!res || !res.ok || res.status >= 400) {\n        setUser({\n          loggedIn: false\n        });\n        return;\n      }\n      return res.json(); // if non of the above, return the response as JSON\n    }).then(data => {\n      // data is the response from the server\n      if (!data) {\n        // if there is no data, set loggedIn to false\n        setUser({\n          loggedIn: false\n        });\n        return;\n      }\n      // if there is data returned by auth/login, setUser to data and navigate to home\n      navigate('/home');\n      setUser({\n        ...data\n      });\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AccountContext.Provider, {\n    value: {\n      user,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 12\n  }, this);\n};\n_s(UserContext, \"M1neyIgBCt7DbsYPVs8EKBXQY7s=\", false, function () {\n  return [useNavigate];\n});\n_c = UserContext;\nexport default UserContext;\nvar _c;\n$RefreshReg$(_c, \"UserContext\");","map":{"version":3,"names":["useEffect","createContext","useState","useNavigate","AccountContext","UserContext","children","user","setUser","loggedIn","navigate","fetch","credentials","catch","err","then","res","ok","status","json","data"],"sources":["/Users/diegosanmartin/Desktop/IE University/IE 2022/Everywhere/profiles/frontend/src/components/AccountContext.jsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { createContext } from \"react\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n\nexport const AccountContext = createContext(); //\n\n// Function to keep track of whether logged in or not\nconst UserContext = ({children}) => {\n    const [user, setUser] = useState({ loggedIn: null }); // loggedIn is null by default\n    const navigate = useNavigate();\n\n    // Function below runs when component mounts which will be when the page is refreshed\n    useEffect(() => {\n        fetch(\"http://localhost:4000/auth/login\", { // fetch the login route\n            credentials: \"include\", // include cookies\n            }).catch(err => {\n                setUser({ loggedIn: false }); // if error, set loggedIn to false\n                return;\n            }).then(res => {\n                if (!res || !res.ok || res.status >= 400) {\n                    setUser({ loggedIn: false }); \n                    return;\n                }\n                return res.json(); // if non of the above, return the response as JSON\n            }).then(data => { // data is the response from the server\n                if (!data) { // if there is no data, set loggedIn to false\n                    setUser({ loggedIn: false });\n                    return;\n                }\n                // if there is data returned by auth/login, setUser to data and navigate to home\n                navigate('/home'); \n                setUser({...data});\n                })\n    }, []);\n\n    return <AccountContext.Provider value={{user, setUser}}>\n        {children}\n    </AccountContext.Provider>\n}\n\nexport default UserContext;"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,aAAa,QAAQ,OAAO;AACrC,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,kBAAkB;AAAC;AAG/C,OAAO,MAAMC,cAAc,gBAAGH,aAAa,EAAE,CAAC,CAAC;;AAE/C;AACA,MAAMI,WAAW,GAAG,QAAgB;EAAA;EAAA,IAAf;IAACC;EAAQ,CAAC;EAC3B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC;IAAEO,QAAQ,EAAE;EAAK,CAAC,CAAC,CAAC,CAAC;EACtD,MAAMC,QAAQ,GAAGP,WAAW,EAAE;;EAE9B;EACAH,SAAS,CAAC,MAAM;IACZW,KAAK,CAAC,kCAAkC,EAAE;MAAE;MACxCC,WAAW,EAAE,SAAS,CAAE;IACxB,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAI;MACZN,OAAO,CAAC;QAAEC,QAAQ,EAAE;MAAM,CAAC,CAAC,CAAC,CAAC;MAC9B;IACJ,CAAC,CAAC,CAACM,IAAI,CAACC,GAAG,IAAI;MACX,IAAI,CAACA,GAAG,IAAI,CAACA,GAAG,CAACC,EAAE,IAAID,GAAG,CAACE,MAAM,IAAI,GAAG,EAAE;QACtCV,OAAO,CAAC;UAAEC,QAAQ,EAAE;QAAM,CAAC,CAAC;QAC5B;MACJ;MACA,OAAOO,GAAG,CAACG,IAAI,EAAE,CAAC,CAAC;IACvB,CAAC,CAAC,CAACJ,IAAI,CAACK,IAAI,IAAI;MAAE;MACd,IAAI,CAACA,IAAI,EAAE;QAAE;QACTZ,OAAO,CAAC;UAAEC,QAAQ,EAAE;QAAM,CAAC,CAAC;QAC5B;MACJ;MACA;MACAC,QAAQ,CAAC,OAAO,CAAC;MACjBF,OAAO,CAAC;QAAC,GAAGY;MAAI,CAAC,CAAC;IAClB,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAO,QAAC,cAAc,CAAC,QAAQ;IAAC,KAAK,EAAE;MAACb,IAAI;MAAEC;IAAO,CAAE;IAAA,UAClDF;EAAQ;IAAA;IAAA;IAAA;EAAA,QACa;AAC9B,CAAC;AAAA,GA/BKD,WAAW;EAAA,QAEIF,WAAW;AAAA;AAAA,KAF1BE,WAAW;AAiCjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}